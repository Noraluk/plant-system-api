// Code generated by MockGen. DO NOT EDIT.
// Source: ./config/firebase.go

// Package mock_config is a generated GoMock package.
package mock_config

import (
	context "context"
	config "plant-system-api/config"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// NewRef mocks base method.
func (m *MockClient) NewRef(path string) config.Ref {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewRef", path)
	ret0, _ := ret[0].(config.Ref)
	return ret0
}

// NewRef indicates an expected call of NewRef.
func (mr *MockClientMockRecorder) NewRef(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRef", reflect.TypeOf((*MockClient)(nil).NewRef), path)
}

// MockRef is a mock of Ref interface.
type MockRef struct {
	ctrl     *gomock.Controller
	recorder *MockRefMockRecorder
}

// MockRefMockRecorder is the mock recorder for MockRef.
type MockRefMockRecorder struct {
	mock *MockRef
}

// NewMockRef creates a new mock instance.
func NewMockRef(ctrl *gomock.Controller) *MockRef {
	mock := &MockRef{ctrl: ctrl}
	mock.recorder = &MockRefMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRef) EXPECT() *MockRefMockRecorder {
	return m.recorder
}

// Child mocks base method.
func (m *MockRef) Child(path string) config.Ref {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Child", path)
	ret0, _ := ret[0].(config.Ref)
	return ret0
}

// Child indicates an expected call of Child.
func (mr *MockRefMockRecorder) Child(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Child", reflect.TypeOf((*MockRef)(nil).Child), path)
}

// Get mocks base method.
func (m *MockRef) Get(ctx context.Context, v interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockRefMockRecorder) Get(ctx, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRef)(nil).Get), ctx, v)
}

// Set mocks base method.
func (m *MockRef) Set(ctx context.Context, v interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockRefMockRecorder) Set(ctx, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockRef)(nil).Set), ctx, v)
}
